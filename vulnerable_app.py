import pickle
import subprocess
import os
import sqlite3
import random
import hashlib
from flask import Flask, request, render_template_string, jsonify
import yaml
import json

app = Flask(__name__)

# üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –£–Ø–ó–í–ò–ú–û–°–¢–ò

# 1. –£—è–∑–≤–∏–º–æ—Å—Ç—å: –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è
@app.route('/unpickle', methods=['POST'])
def unpickle_data():
    data = request.get_data()
    obj = pickle.loads(data)  # SONAR: Critical - Unsafe deserialization
    return str(obj)

# 2. –£—è–∑–≤–∏–º–æ—Å—Ç—å: Command Injection
@app.route('/execute', methods=['GET'])
def execute_command():
    cmd = request.args.get('cmd', 'ls')
    # –û–ø–∞—Å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ shell=True
    result = subprocess.check_output(cmd, shell=True)  # SONAR: Critical - Command injection
    return result.decode('utf-8')

# 3. –£—è–∑–≤–∏–º–æ—Å—Ç—å: SQL Injection
@app.route('/search', methods=['GET'])
def search_users():
    username = request.args.get('username', '')
    conn = sqlite3.connect('test.db')
    cursor = conn.cursor()
    
    # –ü—Ä—è–º–∞—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ SQL
    query = f"SELECT * FROM users WHERE username = '{username}'"  # SONAR: Critical - SQL injection
    cursor.execute(query)
    return jsonify(cursor.fetchall())

# üî¥ –°–ï–†–¨–ï–ó–ù–´–ï –£–Ø–ó–í–ò–ú–û–°–¢–ò

# 4. –£—è–∑–≤–∏–º–æ—Å—Ç—å: XSS
@app.route('/hello', methods=['GET'])
def hello_xss():
    name = request.args.get('name', 'World')
    # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π XSS
    template = f"<h1>Hello, {name}!</h1>"  # SONAR: Major - Potential XSS
    return render_template_string(template)

# 5. –£—è–∑–≤–∏–º–æ—Å—Ç—å: Path Traversal
@app.route('/readfile', methods=['GET'])
def read_file():
    filename = request.args.get('file', 'test.txt')
    # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —á–∏—Ç–∞—Ç—å –ª—é–±—ã–µ —Ñ–∞–π–ª—ã
    with open(filename, 'r') as f:  # SONAR: Major - Path traversal
        return f.read()

# 6. –£—è–∑–≤–∏–º–æ—Å—Ç—å: –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è YAML –∑–∞–≥—Ä—É–∑–∫–∞
@app.route('/yaml-load', methods=['POST'])
def yaml_load():
    data = request.get_data(as_text=True)
    obj = yaml.load(data, Loader=yaml.Loader)  # SONAR: Critical - Unsafe YAML load
    return str(obj)

# üî¥ –£–Ø–ó–í–ò–ú–û–°–¢–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò

# 7. –•–∞—Ä–¥–∫–æ–¥–Ω—ã–π –ø–∞—Ä–æ–ª—å
DB_PASSWORD = "super_secret_password_123"  # SONAR: Major - Hardcoded password

# 8. Weak cryptography
def hash_password(password):
    return hashlib.md5(password.encode()).hexdigest()  # SONAR: Major - Weak hash

# 9. –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
def generate_api_key():
    return str(random.randint(1000, 9999))  # SONAR: Major - Insecure randomness

# 10. Debug mode in production
if __name__ == '__main__':
    app.run(debug=True)  # SONAR: Major - Debug mode enabled

# üî¥ CODE SMELLS –ò –ë–ê–ì–ò

# 11. –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
def process_data():
    while True:  # SONAR: Bug - Endless loop
        print("Processing...")

# 12. –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∫–æ–¥
def unused_function():  # SONAR: Code smell - Unused function
    return "I'm never used"

# 13. –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
def calculate_area(width, height):
    return width * height

def calculate_rectangle_area(w, h):  # SONAR: Code smell - Duplicated code
    return w * h

# 14. –°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def complicated_function(x, y, z):
    result = 0
    for i in range(10):
        if x > y and y < z or x == y and y != z or x < y and y > z:
            result += i * x * y * z
            if result > 100:
                for j in range(5):
                    result -= j
                    while result < 50:
                        result += 1
    return result  # SONAR: Code smell - Overly complex function