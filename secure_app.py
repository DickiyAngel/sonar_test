import secrets
import subprocess
import os
import sqlite3
from flask import Flask, request, render_template, escape, jsonify
import yaml
import bcrypt
from pathlib import Path

app = Flask(__name__)

# üü¢ –ë–ï–ó–û–ü–ê–°–ù–´–ï –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–´

# 1. –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
@app.route('/unpickle', methods=['POST'])
def unpickle_data():
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º JSON –≤–º–µ—Å—Ç–æ pickle
    data = request.get_json()
    return jsonify({"status": "Use JSON for serialization"})

# 2. –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
@app.route('/execute', methods=['GET'])
def execute_command():
    allowed_commands = {'ls': ['ls', '-la'], 'pwd': ['pwd']}
    cmd = request.args.get('cmd', 'ls')
    
    if cmd in allowed_commands:
        result = subprocess.run(
            allowed_commands[cmd], 
            capture_output=True, 
            text=True, 
            shell=False  # –ë–µ–∑ shell!
        )
        return result.stdout
    return "Command not allowed"

# 3. –ó–∞—â–∏—Ç–∞ –æ—Ç SQL Injection
@app.route('/search', methods=['GET'])
def search_users():
    username = request.args.get('username', '')
    conn = sqlite3.connect('test.db')
    cursor = conn.cursor()
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    query = "SELECT * FROM users WHERE username = ?"
    cursor.execute(query, (username,))
    return jsonify(cursor.fetchall())

# 4. –ó–∞—â–∏—Ç–∞ –æ—Ç XSS
@app.route('/hello', methods=['GET'])
def hello_xss():
    name = request.args.get('name', 'World')
    safe_name = escape(name)  # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞
    return f"<h1>Hello, {safe_name}!</h1>"

# 5. –ó–∞—â–∏—Ç–∞ –æ—Ç Path Traversal
@app.route('/readfile', methods=['GET'])
def read_file():
    filename = request.args.get('file', 'test.txt')
    base_dir = Path('/safe/directory')
    file_path = (base_dir / filename).resolve()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ñ–∞–π–ª –≤–Ω—É—Ç—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if base_dir.resolve() not in file_path.parents:
        return "Access denied", 403
    
    try:
        with open(file_path, 'r') as f:
            return f.read()
    except FileNotFoundError:
        return "File not found", 404

# 6. –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è YAML –∑–∞–≥—Ä—É–∑–∫–∞
@app.route('/yaml-load', methods=['POST'])
def yaml_load():
    data = request.get_data(as_text=True)
    obj = yaml.safe_load(data)  # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫
    return str(obj)

# üü¢ –ë–ï–ó–û–ü–ê–°–ù–´–ï –ü–†–ê–ö–¢–ò–ö–ò

# 7. –ü–∞—Ä–æ–ª—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
DB_PASSWORD = os.environ.get('DB_PASSWORD', 'default_strong_password')

# 8. Strong cryptography
def hash_password(password):
    salt = bcrypt.gensalt()
    return bcrypt.hashpw(password.encode(), salt)

# 9. –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
def generate_api_key():
    return secrets.token_urlsafe(32)

# 10. Production mode
if __name__ == '__main__':
    app.run(debug=False, host='0.0.0.0', port=5000)

# üü¢ –ß–ò–°–¢–´–ô –ö–û–î

# 11. –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤
def process_data(max_iterations=1000):
    for i in range(max_iterations):
        print("Processing...")
        if i >= max_iterations - 1:
            break

# 13. –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
def calculate_area(width, height):
    return width * height

# 14. –£–ø—Ä–æ—â–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
def simplified_function(x, y, z):
    # –õ–æ–≥–∏–∫–∞ —É–ø—Ä–æ—â–µ–Ω–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    if x > y:
        return min(x * y * z, 100)
    return max(x + y + z, 0)